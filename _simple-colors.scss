// Because colors

// In case more than 2 maps are combined
@function merge-maps($maps...) {
  $combined: ();
  @each $map in $maps {
    $combined: map-merge($combined, $map);
  }
  @return $combined;
}

// map-get in a wrapper to give some debug feedback
@function get-map($map, $key) {
  @if( map-has-key($map, $key)) {
    @return map-get($map, $key);
  } @else {
    @debug "Unknown key: `#{$key}` found, value could not be set";
    @return null;
  }
}

// Shorthand for get-map with colors map predefined
@function color($key) {
  @return get-map($colors, $key);
}

// name colors in an absolute map based on their value:
// http://chir.ag/projects/name-that-color/#6195ED or
// https://www.npmjs.com/package/namethatcolor
$colors: (
  'white': #fff,
  'black': #000,
  'hot-pink':  #ff69b4,
  'pale-cornflower-blue': #abcdef
);

// create shorthands for things, using the names above
$test-colors: (
  'test':  color('hot-pink'),
  'test-blue': color('pale-cornflower-blue'),
);

// technically other color types and properties could be used too
$not-really-colors: (
  'none': transparent,
  'red-alpha': rgba(255,0,0,.3),
  'gradient': linear-gradient(to bottom, darken(color('hot-pink'), 20%), color('hot-pink')),
);

// Merge old and new map(s) into one, cascade applies to duplicate entries
$colors: merge-maps(
  $colors,
  $test-colors,
  $not-really-colors
);

// Examples of mixins to simplify even more
@mixin color($key) {
  color: color($key);
}
@mixin bg($key) {
  background-color: color($key);
}
@mixin border-color($key) {
  border-color: color($key);
}

// use it:
// body {
//  @include color('black');
//  @include bg('white');
//  @include border-color('gradient');
//  border-right-color: color('test');
// }
