// simple-colors, two maps and a function
// ---
@function color($key) {
  @if( map-has-key($colors, $key)) {
    @return map-get($colors, $key);
  } @else {
    @debug "Unknown color: `#{$key}` found, value could not be set";
    @return null;
  }
}

// name colors in an absolute map based on their value:
// http://chir.ag/projects/name-that-color/#6195ED or
// https://www.npmjs.com/package/namethatcolor
$colors: (
  'none': transparent,
  'white': #fff,
  'black': #000,
  'hot-pink':  #ff69b4
);
// Make custom bindings to your liking
$bindings: (
  'test': color('hot-pink'),
  'shadow': rgba(color('black'), .6)
);

$colors: map-merge($colors, $bindings);

// simple-colors helper mixins
@mixin color($key) {
  color: color($key);
}
@mixin bg($key) {
  background-color: color($key);
}
@mixin border-color($key) {
  border-color: color($key);
}
@mixin shadow($key, $x:0, $y:0, $blur:.25rem, $inset:0, $color: 'black') {
  box-shadow:$x $y, $blur, $inset, $color: 'black';
}

// use it:
// body {
//  @include color('black');
//  @include bg('white');
//  @include border-color('gradient');
//  border-right-color: color('test');
// }
